<request id="114081" actions="0">
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="xorg-x11-driver-input.SUSE_SLE-11-SP2_Update"/>
  <target project="SUSE:SLE-11-SP2:Update" package="xorg-x11-driver-input"/>
<sourcediff key="a1722e5ea1a0005616d8e77a01ebc1ae">
  <old project="SUSE:SLE-11-SP2:Update" package="xorg-x11-driver-input.1346" rev="1" srcmd5="5fa6a63c06f1e16f58e2b5dfc347a539"/>
  <new project="SUSE:Maintenance:2396" package="xorg-x11-driver-input.SUSE_SLE-11-SP2_Update" rev="4" srcmd5="b79a0de3d52d378d49528a2da3b65157"/>
  <files>
    <file state="changed">
      <old name="xorg-x11-driver-input.changes" md5="1a3d3996093908315bc69d650f2c4d4b" size="42063"/>
      <new name="xorg-x11-driver-input.changes" md5="0a4f294cacffb86410a7b2780066f3a1" size="42433"/>
      <diff lines="13">@@ -1,4 +1,12 @@
 -------------------------------------------------------------------
+Tue Mar  8 20:52:06 UTC 2016 - eich@suse.com
+
+- n_01-Add-a-kiosk-mode-for-touch-screens.patch
+  n_02-Add-delay-between-button-press-and-release-to-kiosk-mode.patch
+  Add Kiosk mode: Imlement a filter for the evdev driver which
+  provides click-on-touch and click-on-release (FATE#319647, bsc#967836).
+
+-------------------------------------------------------------------
 Fri Oct 23 09:21:09 UTC 2015 - eich@suse.com
 
 - The Elo fdi file needs to get loaded after the synaptics one. The latter
</diff>
    </file>
    <file state="changed">
      <old name="xorg-x11-driver-input.spec" md5="5ce2dbcbfc0c745594b8ca5f5e6907c2" size="9403"/>
      <new name="xorg-x11-driver-input.spec" md5="12271a612eb953c9b181959482cb90b3" size="9591"/>
      <diff lines="28">@@ -110,6 +110,8 @@
 Patch57:        U_03-Convert-IgnoreAbsolute-RelativeAxes-options-into-trinary-state.patch
 Patch58:        U_04-Fix-typo-use-uppercase-like-the-other-messages.patch
 Patch59:        U_05-Use-X_PROBED-instead-of-X_INFO-for-probed-values.patch
+Patch60:	n_01-Add-a-kiosk-mode-for-touch-screens.patch
+Patch61:	n_02-Add-delay-between-button-press-and-release-to-kiosk-mode.patch
 
 %description
 This package contains X.Org input drivers.
@@ -139,6 +141,8 @@
 %patch57 -p2
 %patch58 -p2
 %patch59 -p2
+%patch60 -p2
+%patch61 -p2
 popd
 pushd xf86-input-elo2300-*
 %patch17 -p1
@@ -210,7 +214,8 @@
   pushd $dir
     case $dir in
       xf86-input-joystick-* | \
-       xf86-input-vmmouse-*) autoreconf -fi ;;
+       xf86-input-vmmouse-* | \
+       xf86-input-evdev-*) autoreconf -fi ;;
                           *) ;;
     esac
     ./configure CFLAGS="$RPM_OPT_FLAGS -fno-strict-aliasing" \
</diff>
    </file>
    <file state="added">
      <new name="n_01-Add-a-kiosk-mode-for-touch-screens.patch" md5="fb7f0804b3c9dbd27227e746c903a816" size="16971"/>
      <diff lines="462">@@ -0,0 +1,461 @@
+From: Egbert Eich &lt;eich@suse.de&gt;
+Date: Tue Mar 8 21:17:55 2016 +0100
+Subject: [PATCH 1/2]Add a 'kiosk mode' for touch screens
+Patch-mainline: never
+References: FATE#319647, bsc#967836
+Signed-off-by: Egbert Eich &lt;eich@suse.com&gt;
+
+This mode provides either a 'click-on-touch' or
+'click-on-release'. The button to track can be
+specified with an option.
+
+Signed-off-by: Egbert Eich &lt;eich@suse.de&gt;
+---
+ xf86-input-evdev-2.2.5/include/evdev-properties.h |   4 +
+ xf86-input-evdev-2.2.5/man/evdev.man              |  20 ++
+ xf86-input-evdev-2.2.5/src/Makefile.am            |   3 +-
+ xf86-input-evdev-2.2.5/src/evdev.c                |  22 +-
+ xf86-input-evdev-2.2.5/src/evdev.h                |  27 +++
+ xf86-input-evdev-2.2.5/src/kioskTouch.c           | 239 ++++++++++++++++++++++
+ 6 files changed, 299 insertions(+), 16 deletions(-)
+
+diff --git a/xf86-input-evdev-2.2.5/include/evdev-properties.h b/xf86-input-evdev-2.2.5/include/evdev-properties.h
+index 31f6c66..7b6d831 100644
+--- a/xf86-input-evdev-2.2.5/include/evdev-properties.h
++++ b/xf86-input-evdev-2.2.5/include/evdev-properties.h
+@@ -50,6 +50,10 @@
+ /* CARD8, either 1 value or pairs, value range 0-32, 0 to disable a value*/
+ #define EVDEV_PROP_DRAGLOCK "Evdev Drag Lock Buttons"
+ 
++/* Kiosk Touch mode */
++#define EVDEV_PROP_KIOSK_TOUCH "Evdev Kiosk Touch Mode"
++#define EVDEV_PROP_KIOSK_BUTTON "Evdev Kiosk Touch Button"
++
+ /* Axis inversion */
+ /* BOOL, 2 values [x, y], 1 inverts axis */
+ #define EVDEV_PROP_INVERT_AXES "Evdev Axis Inversion"
+diff --git a/xf86-input-evdev-2.2.5/man/evdev.man b/xf86-input-evdev-2.2.5/man/evdev.man
+index 9efa2a8..6012493 100644
+--- a/xf86-input-evdev-2.2.5/man/evdev.man
++++ b/xf86-input-evdev-2.2.5/man/evdev.man
+@@ -172,6 +172,20 @@ is mapped to the negative Y axis motion and button number
+ .I N2
+ is mapped to the positive Y axis motion.  Default: "4 5". Property:
+ "Evdev Wheel Emulation Axes".
++.TP 7
++.BI "Option \*qKioskTouchMode\*q \*q" "N" \*q
++Specifies the Kiosk Touch mode to use. Mode
++.I N
++sets the mode: 0 - off, 1 - click on touch, 2 - click on release.
++Default: "0". Property:
++"Evdev Kiosk Touch Mode".
++.TP 7
++.BI "Option \*qKioskTouchButton\*q \*q" "N" \*q
++Specifies the Kiosk Touch button number to use. Button
++.I N
++range: 0-255.
++Default: "0". Property:
++"Evdev Kiosk Touch Button".
+ 
+ .SH SUPPORTED PROPERTIES
+ The following properties are provided by the
+@@ -214,6 +228,12 @@ value.
+ .TP 7
+ .BI "Evdev Wheel Emulation Timeout"
+ 1 16-bit positive value.
++.TP 7
++.BI "Evdev Kiosk Touch Mode"
++1 8-bit positive value.
++.TP 7
++.BI "Evdev Kiosk Touch Button"
++1 8-bit positive value.
+ 
+ .SH AUTHORS
+ Kristian H&#xF8;gsberg.
+diff --git a/xf86-input-evdev-2.2.5/src/Makefile.am b/xf86-input-evdev-2.2.5/src/Makefile.am
+index 2b6c800..e7a38ed 100644
+--- a/xf86-input-evdev-2.2.5/src/Makefile.am
++++ b/xf86-input-evdev-2.2.5/src/Makefile.am
+@@ -36,5 +36,6 @@ INCLUDES=-I$(top_srcdir)/include/
+                                @DRIVER_NAME@.h \
+                                emuMB.c \
+                                emuWheel.c \
+-                               draglock.c
++                               draglock.c \
++                               kioskTouch.c
+ 
+diff --git a/xf86-input-evdev-2.2.5/src/evdev.c b/xf86-input-evdev-2.2.5/src/evdev.c
+index f376ce6..bbefee5 100644
+--- a/xf86-input-evdev-2.2.5/src/evdev.c
++++ b/xf86-input-evdev-2.2.5/src/evdev.c
+@@ -79,19 +79,6 @@
+ 
+ #define ArrayLength(a) (sizeof(a) / (sizeof((a)[0])))
+ 
+-/* evdev flags */
+-#define EVDEV_KEYBOARD_EVENTS	(1 &lt;&lt; 0)
+-#define EVDEV_BUTTON_EVENTS	(1 &lt;&lt; 1)
+-#define EVDEV_RELATIVE_EVENTS	(1 &lt;&lt; 2)
+-#define EVDEV_ABSOLUTE_EVENTS	(1 &lt;&lt; 3)
+-#define EVDEV_TOUCHPAD		(1 &lt;&lt; 4)
+-#define EVDEV_INITIALIZED	(1 &lt;&lt; 5) /* WheelInit etc. called already? */
+-#define EVDEV_TOUCHSCREEN	(1 &lt;&lt; 6)
+-#define EVDEV_CALIBRATED	(1 &lt;&lt; 7) /* run-time calibrated? */
+-#define EVDEV_UNIGNORE_ABSOLUTE (1 &lt;&lt; 9) /* explicitly unignore abs axes */
+-#define EVDEV_UNIGNORE_RELATIVE (1 &lt;&lt; 10) /* explicitly unignore rel axes */
+-
+-
+ #define MIN_KEYCODE 8
+ #define GLYPHS_PER_KEY 2
+ #define AltMask		Mod1Mask
+@@ -463,6 +450,9 @@ EvdevProcessEvent(InputInfoPtr pInfo, struct input_event *ev)
+                     if (EvdevWheelEmuFilterButton(pInfo, button, value))
+                         break;
+ 
++                    if (EvdevKioskTouchFilterButton(pInfo, button, value))
++                        break;
++
+                     if (EvdevMBEmuFilterEvent(pInfo, button, value))
+                         break;
+ 
+@@ -509,6 +499,7 @@ EvdevProcessEvent(InputInfoPtr pInfo, struct input_event *ev)
+                 abs = 0;
+                 rel = 1;
+             }
++            EvdevKioskTouchMotionEvents(pInfo, abs);
+ 
+             if (rel) {
+                 int post_deltas[REL_CNT] = {0}; /* axis-mapped deltas */
+@@ -583,6 +574,7 @@ EvdevProcessEvent(InputInfoPtr pInfo, struct input_event *ev)
+                 xf86PostMotionEventP(pInfo-&gt;dev, TRUE, 0, pEvdev-&gt;num_vals, v);
+             }
+ 
++            EvdevKioskTouchSynthButton(pInfo);
+ 	    if (pEvdev-&gt;is_cooltouch) {
+ 		if (!pEvdev-&gt;touching &amp;&amp; (pEvdev-&gt;touch_ev_rec &amp; 1)) {
+ 		    button = EvdevUtilButtonEventToButtonNumber(pEvdev, BTN_LEFT);
+@@ -650,8 +642,6 @@ EvdevReadInput(InputInfoPtr pInfo)
+     }
+ }
+ 
+-#define TestBit(bit, array) ((array[(bit) / LONG_BITS]) &amp; (1L &lt;&lt; ((bit) % LONG_BITS)))
+-
+ static void
+ EvdevPtrCtrlProc(DeviceIntPtr device, PtrCtrl *ctrl)
+ {
+@@ -1333,6 +1323,7 @@ EvdevInit(DeviceIntPtr device)
+     EvdevMBEmuInitProperty(device);
+     EvdevWheelEmuInitProperty(device);
+     EvdevDragLockInitProperty(device);
++    EvdevKioskTouchInitProperty(device);
+ #endif
+ 
+     return Success;
+@@ -1916,6 +1907,7 @@ EvdevPreInit(InputDriverPtr drv, IDevPtr dev, int flags)
+         EvdevMBEmuPreInit(pInfo);
+         EvdevWheelEmuPreInit(pInfo);
+         EvdevDragLockPreInit(pInfo);
++        EvdevKioskTouchPreInit(pInfo);
+     }
+ 
+     return pInfo;
+diff --git a/xf86-input-evdev-2.2.5/src/evdev.h b/xf86-input-evdev-2.2.5/src/evdev.h
+index 6efb777..8d29078 100644
+--- a/xf86-input-evdev-2.2.5/src/evdev.h
++++ b/xf86-input-evdev-2.2.5/src/evdev.h
+@@ -87,6 +87,20 @@ typedef struct {
+     int traveled_distance;
+ } WheelAxis, *WheelAxisPtr;
+ 
++/* evdev flags */
++#define EVDEV_KEYBOARD_EVENTS	(1 &lt;&lt; 0)
++#define EVDEV_BUTTON_EVENTS	(1 &lt;&lt; 1)
++#define EVDEV_RELATIVE_EVENTS	(1 &lt;&lt; 2)
++#define EVDEV_ABSOLUTE_EVENTS	(1 &lt;&lt; 3)
++#define EVDEV_TOUCHPAD		(1 &lt;&lt; 4)
++#define EVDEV_INITIALIZED	(1 &lt;&lt; 5) /* WheelInit etc. called already? */
++#define EVDEV_TOUCHSCREEN	(1 &lt;&lt; 6)
++#define EVDEV_CALIBRATED	(1 &lt;&lt; 7) /* run-time calibrated? */
++#define EVDEV_UNIGNORE_ABSOLUTE (1 &lt;&lt; 9) /* explicitly unignore abs axes */
++#define EVDEV_UNIGNORE_RELATIVE (1 &lt;&lt; 10) /* explicitly unignore rel axes */
++
++#define TestBit(bit, array) ((array[(bit) / LONG_BITS]) &amp; (1L &lt;&lt; ((bit) % LONG_BITS)))
++
+ typedef struct {
+     const char *device;
+     int grabDevice;         /* grab the event device? */
+@@ -145,6 +159,12 @@ typedef struct {
+         int                 min_y;
+         int                 max_y;
+     } calibration;
++    struct {
++        int                 mode; /* 0: 0ff, 1: click on touch, 2: click on release */
++        unsigned int        button;
++        unsigned int        abs;
++        unsigned int        state;
++    } kioskTouch;
+ 
+     unsigned char btnmap[32];           /* config-file specified button mapping */
+ 
+@@ -190,9 +210,16 @@ BOOL EvdevWheelEmuFilterMotion(InputInfoPtr pInfo, struct input_event *pEv);
+ void EvdevDragLockPreInit(InputInfoPtr pInfo);
+ BOOL EvdevDragLockFilterEvent(InputInfoPtr pInfo, unsigned int button, int value);
+ 
++/* Kiosk Touch */
++void EvdevKioskTouchPreInit(InputInfoPtr pInfo);
++void EvdevKioskTouchMotionEvents(InputInfoPtr pInfo, unsigned int abs);
++BOOL EvdevKioskTouchFilterButton(InputInfoPtr pInfo, unsigned int button, int value);
++void EvdevKioskTouchSynthButton(InputInfoPtr pInfo);
++
+ #ifdef HAVE_PROPERTIES
+ void EvdevMBEmuInitProperty(DeviceIntPtr);
+ void EvdevWheelEmuInitProperty(DeviceIntPtr);
+ void EvdevDragLockInitProperty(DeviceIntPtr);
++void EvdevKioskTouchInitProperty(DeviceIntPtr);
+ #endif
+ #endif
+diff --git a/xf86-input-evdev-2.2.5/src/kioskTouch.c b/xf86-input-evdev-2.2.5/src/kioskTouch.c
+new file mode 100644
+index 0000000..4f9389f
+--- /dev/null
++++ b/xf86-input-evdev-2.2.5/src/kioskTouch.c
+@@ -0,0 +1,239 @@
++/*
++ * Copyright 2016 Egbert Eich
++ *
++ * Permission to use, copy, modify, distribute, and sell this software
++ * and its documentation for any purpose is hereby granted without
++ * fee, provided that the above copyright notice appear in all copies
++ * and that both that copyright notice and this permission notice
++ * appear in supporting documentation, and that the name of the authors
++ * not be used in advertising or publicity pertaining to distribution of the
++ * software without specific, written prior permission.  The authors make no
++ * representations about the suitability of this software for any
++ * purpose.  It is provided "as is" without express or implied
++ * warranty.
++ *
++ * THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
++ * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
++ * NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
++ * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
++ * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
++ * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
++ * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
++ *
++ */
++
++
++#ifdef HAVE_CONFIG_H
++#include "config.h"
++#endif
++
++#include &lt;X11/Xatom.h&gt;
++#include &lt;xf86.h&gt;
++#include &lt;xf86Xinput.h&gt;
++#include &lt;exevents.h&gt;
++#include &lt;xorgVersion.h&gt;
++
++#include &lt;evdev-properties.h&gt;
++#include "evdev.h"
++
++#define DEBUG(x) x;
++
++#ifdef HAVE_PROPERTIES
++static Atom prop_ktouch        = 0; /* Kiosk touch emulation on/off property */
++static Atom prop_ktouch_button = 0; /* Kiosk touch emulation button property */
++#endif
++
++#define KTOUCH_STATE_ACTIVE 1U &lt;&lt; 0
++#define KTOUCH_STATE_SYNTH  1U &lt;&lt; 1
++
++void
++EvdevKioskTouchPreInit(InputInfoPtr pInfo)
++{
++    EvdevPtr pEvdev = (EvdevPtr)pInfo-&gt;private;
++    int val;
++
++    if (!(pEvdev-&gt;flags &amp; EVDEV_ABSOLUTE_EVENTS) &amp;&amp;
++        (pEvdev-&gt;flags &amp; EVDEV_RELATIVE_EVENTS) &amp;&amp;
++        (pEvdev-&gt;flags &amp; EVDEV_TOUCHPAD) &amp;&amp;
++        !TestBit(ABS_X, pEvdev-&gt;abs_bitmask) &amp;&amp;
++        !TestBit(ABS_Y, pEvdev-&gt;abs_bitmask) &amp;&amp;
++        pEvdev-&gt;is_cooltouch) {
++        pEvdev-&gt;kioskTouch.mode = -1;
++        return;
++    }
++    val = xf86SetIntOption(pInfo-&gt;options, "KioskTouchMode", 0);
++    if (val &lt; 0 || val &gt; 2) {
++        xf86Msg(X_WARNING, "%s: Invalid KioskTouchMode value: %d\n",
++                pInfo-&gt;name, val);
++        pEvdev-&gt;kioskTouch.mode = 0;
++    } else {
++        pEvdev-&gt;kioskTouch.mode = val;
++    }
++    val = xf86SetIntOption(pInfo-&gt;options, "KioskTouchButton", 1);
++    if (val &gt; 255) {
++         xf86Msg(X_WARNING, "%s: Invalid KioskTouchButton value: %d\n",
++                pInfo-&gt;name, val);
++         val = 0;
++    }
++    pEvdev-&gt;kioskTouch.button = val;
++    pEvdev-&gt;kioskTouch.state = 0;
++    pEvdev-&gt;kioskTouch.abs = 0;
++    xf86Msg(X_INFO, "%s: KioskTouchpad mode initialized to %s - button: %d\n",
++            pInfo-&gt;name, (pEvdev-&gt;kioskTouch.mode == 0) ? "disabled" :
++            (pEvdev-&gt;kioskTouch.mode == 1 ? "click-on-touch" : "click-on-release"),
++            pEvdev-&gt;kioskTouch.button);
++}
++
++void
++EvdevKioskTouchMotionEvents(InputInfoPtr pInfo,  unsigned int abs)
++{
++    EvdevPtr pEvdev = (EvdevPtr)pInfo-&gt;private;
++
++    if (pEvdev-&gt;kioskTouch.mode == 1) {
++        pEvdev-&gt;kioskTouch.abs |= abs;
++    }
++}
++
++BOOL
++EvdevKioskTouchFilterButton(InputInfoPtr pInfo, unsigned int button, int value)
++{
++    EvdevPtr pEvdev = (EvdevPtr)pInfo-&gt;private;
++    int ret;
++
++    if (button &amp;&amp; button == pEvdev-&gt;kioskTouch.button) {
++        switch (pEvdev-&gt;kioskTouch.mode) {
++        case 0:
++            DEBUG((ErrorF("EvdevKioskTouchFilterButton: mode 1 button %d value %d\n", \
++                          button, value)))
++            if (value == 1)
++                pEvdev-&gt;kioskTouch.state = KTOUCH_STATE_ACTIVE;
++            else
++                pEvdev-&gt;kioskTouch.state = 0;
++            return FALSE;
++        case 1:
++            ret = TRUE;
++            if (value == 1) {
++                if ((pEvdev-&gt;kioskTouch.abs &amp; (ABS_X | ABS_Y)) == (ABS_X | ABS_Y)) {
++                    DEBUG((ErrorF("Sending ButtonDown/ButtonUp\n")))
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 0, 0, 0);
++                } else {
++                    pEvdev-&gt;kioskTouch.state |= KTOUCH_STATE_SYNTH;
++                }
++            } else if (value == 0) {
++                if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_SYNTH) {
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++                    ret = FALSE;
++                }
++                pEvdev-&gt;kioskTouch.state = 0;
++                pEvdev-&gt;kioskTouch.abs = 0;
++            }
++            return ret;
++        case 2:
++            DEBUG((ErrorF("EvdevKioskTouchFilterButton: mode 2 button %d value %d\n", \
++                          button, value)))
++            if (value == 1)
++                return TRUE;
++            else if (value == 0)
++                DEBUG((ErrorF("Sending ButtonDown\n")))
++                xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++            return FALSE;
++        default:
++            return FALSE;
++        }
++    }
++
++    return FALSE;
++}
++
++void EvdevKioskTouchSynthButton(InputInfoPtr pInfo)
++{
++    EvdevPtr     pEvdev = pInfo-&gt;private;
++
++    if (pEvdev-&gt;kioskTouch.mode == 1 &amp;&amp;
++        pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_SYNTH &amp;&amp;
++        (pEvdev-&gt;kioskTouch.abs &amp; (ABS_X | ABS_Y)) == (ABS_X | ABS_Y)) {
++        DEBUG((ErrorF("Synthing ButtonDown/ButtonUp\n")))
++        xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 1, 0, 0);
++        xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++        pEvdev-&gt;kioskTouch.state &amp;= ~KTOUCH_STATE_SYNTH;
++    }
++}
++
++#ifdef HAVE_PROPERTIES
++static int
++EvdevKioskTouchSetProperty(DeviceIntPtr dev, Atom atom, XIPropertyValuePtr val,
++                           BOOL checkonly)
++{
++    InputInfoPtr pInfo  = dev-&gt;public.devicePrivate;
++    EvdevPtr     pEvdev = pInfo-&gt;private;
++
++    if (atom == prop_ktouch)
++    {
++        if (val-&gt;format != 8 || val-&gt;size != 1 || val-&gt;type != XA_INTEGER)
++            return BadMatch;
++
++        if (!checkonly) {
++            int old_mode =  pEvdev-&gt;kioskTouch.mode;
++            pEvdev-&gt;kioskTouch.mode = *((CARD8*)val-&gt;data);
++            if (old_mode != pEvdev-&gt;kioskTouch.mode) {
++                if (old_mode == 0 &amp;&amp;
++                    pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_ACTIVE)
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++                pEvdev-&gt;kioskTouch.state = 0;
++                pEvdev-&gt;kioskTouch.abs = 0;
++            }
++        }
++    } else if (atom == prop_ktouch_button) {
++
++        if (val-&gt;format != 8 || val-&gt;size != 1 || val-&gt;type != XA_INTEGER)
++            return BadMatch;
++
++        if (!checkonly) {
++            int old_button =  pEvdev-&gt;kioskTouch.button;
++            pEvdev-&gt;kioskTouch.button = *((CARD8*)val-&gt;data);
++            if (old_button != pEvdev-&gt;kioskTouch.button) {
++                if (pEvdev-&gt;kioskTouch.mode == 0 &amp;&amp;
++                    pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_ACTIVE)
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, old_button, 0, 0, 0);
++                pEvdev-&gt;kioskTouch.state = 0;
++                pEvdev-&gt;kioskTouch.abs = 0;
++            }
++        }
++    }
++
++    return Success;
++}
++
++void
++EvdevKioskTouchInitProperty(DeviceIntPtr dev)
++{
++    InputInfoPtr pInfo  = dev-&gt;public.devicePrivate;
++    EvdevPtr     pEvdev = pInfo-&gt;private;
++    int          rc;
++
++    if (pEvdev-&gt;kioskTouch.mode &lt; 0)
++        return;
++
++    prop_ktouch = MakeAtom(EVDEV_PROP_KIOSK_TOUCH, strlen(EVDEV_PROP_KIOSK_TOUCH), TRUE);
++    rc = XIChangeDeviceProperty(dev, prop_ktouch, XA_INTEGER, 8,
++                                PropModeReplace, 1,
++                                &amp;pEvdev-&gt;kioskTouch.mode,
++                                FALSE);
++    if (rc != Success)
++        return;
++    XISetDevicePropertyDeletable(dev, prop_ktouch, FALSE);
++
++    prop_ktouch_button = MakeAtom(EVDEV_PROP_KIOSK_BUTTON, strlen(EVDEV_PROP_KIOSK_BUTTON),
++                                 TRUE);
++    rc = XIChangeDeviceProperty(dev, prop_ktouch_button, XA_INTEGER, 8,
++                                PropModeReplace, 1,
++                                &amp;pEvdev-&gt;kioskTouch.button,
++                                FALSE);
++    if (rc != Success)
++        return;
++    XISetDevicePropertyDeletable(dev, prop_ktouch_button, FALSE);
++
++    XIRegisterPropertyHandler(dev, EvdevKioskTouchSetProperty, NULL, NULL);
++}
++#endif
</diff>
    </file>
    <file state="added">
      <new name="n_02-Add-delay-between-button-press-and-release-to-kiosk-mode.patch" md5="2aefe1ba686f25176a3ebfa54fe36ac2" size="18631"/>
      <diff lines="453">@@ -0,0 +1,452 @@
+From: Egbert Eich &lt;eich@suse.de&gt;
+Date: Sat Apr 9 12:01:12 2016 +0200
+Subject: [PATCH 2/2]Add delay between button press and release to kiosk mode.
+Patch-mainline: never
+References: FATE#319647, bsc#967836
+Signed-off-by: Egbert Eich &lt;eich@suse.com&gt;
+
+This allows to notice the visual feedback of a UI on a button
+press.
+
+Signed-off-by: Egbert Eich &lt;eich@suse.de&gt;
+---
+ xf86-input-evdev-2.2.5/include/evdev-properties.h |   1 +
+ xf86-input-evdev-2.2.5/man/evdev.man              |  13 ++
+ xf86-input-evdev-2.2.5/src/evdev.c                |   7 +-
+ xf86-input-evdev-2.2.5/src/evdev.h                |   8 +-
+ xf86-input-evdev-2.2.5/src/kioskTouch.c           | 213 +++++++++++++++++++---
+ 5 files changed, 216 insertions(+), 26 deletions(-)
+
+diff --git a/xf86-input-evdev-2.2.5/include/evdev-properties.h b/xf86-input-evdev-2.2.5/include/evdev-properties.h
+index 7b6d831..2a77a0c 100644
+--- a/xf86-input-evdev-2.2.5/include/evdev-properties.h
++++ b/xf86-input-evdev-2.2.5/include/evdev-properties.h
+@@ -53,6 +53,7 @@
+ /* Kiosk Touch mode */
+ #define EVDEV_PROP_KIOSK_TOUCH "Evdev Kiosk Touch Mode"
+ #define EVDEV_PROP_KIOSK_BUTTON "Evdev Kiosk Touch Button"
++#define EVDEV_PROP_KIOSK_BUTTON_DELAY "Evdev Kiosk Touch Button Delay"
+ 
+ /* Axis inversion */
+ /* BOOL, 2 values [x, y], 1 inverts axis */
+diff --git a/xf86-input-evdev-2.2.5/man/evdev.man b/xf86-input-evdev-2.2.5/man/evdev.man
+index 6012493..763de15 100644
+--- a/xf86-input-evdev-2.2.5/man/evdev.man
++++ b/xf86-input-evdev-2.2.5/man/evdev.man
+@@ -186,6 +186,16 @@ Specifies the Kiosk Touch button number to use. Button
+ range: 0-255.
+ Default: "0". Property:
+ "Evdev Kiosk Touch Button".
++.TP 7
++.BI "Option \*qKioskTouchButtonDelay\*q \*q" "N" \*q
++Specifies the delay between a button press and release event in ms. A delay will help
++to notice a visual feedback on a button press event. During the delay no motion events
++are generated. Instead the final location is stored and a motion event to this location
++is sent after the button release has been sent at the end of the delay period. Button
++.I N
++range: 0-65535.
++Default: "0". Property:
++"Evdev Kiosk Touch Button Delay".
+ 
+ .SH SUPPORTED PROPERTIES
+ The following properties are provided by the
+@@ -234,6 +244,9 @@ value.
+ .TP 7
+ .BI "Evdev Kiosk Touch Button"
+ 1 8-bit positive value.
++.TP 7
++.BI "Evdev Kiosk Touch Button Delay"
++1 16-bit positive value.
+ 
+ .SH AUTHORS
+ Kristian H&#xF8;gsberg.
+diff --git a/xf86-input-evdev-2.2.5/src/evdev.c b/xf86-input-evdev-2.2.5/src/evdev.c
+index bbefee5..2c4eb9d 100644
+--- a/xf86-input-evdev-2.2.5/src/evdev.c
++++ b/xf86-input-evdev-2.2.5/src/evdev.c
+@@ -499,7 +499,6 @@ EvdevProcessEvent(InputInfoPtr pInfo, struct input_event *ev)
+                 abs = 0;
+                 rel = 1;
+             }
+-            EvdevKioskTouchMotionEvents(pInfo, abs);
+ 
+             if (rel) {
+                 int post_deltas[REL_CNT] = {0}; /* axis-mapped deltas */
+@@ -571,6 +570,7 @@ EvdevProcessEvent(InputInfoPtr pInfo, struct input_event *ev)
+                     v[1] = (pEvdev-&gt;absinfo[ABS_Y].maximum - v[1] +
+                             pEvdev-&gt;absinfo[ABS_Y].minimum);
+ 
++                EvdevKioskTouchMotionEvents(pInfo, abs, v);
+                 xf86PostMotionEventP(pInfo-&gt;dev, TRUE, 0, pEvdev-&gt;num_vals, v);
+             }
+ 
+@@ -1378,6 +1378,7 @@ EvdevOn(DeviceIntPtr device)
+         xf86FlushInput(pInfo-&gt;fd);
+         xf86AddEnabledDevice(pInfo);
+         EvdevMBEmuOn(pInfo);
++        EvdevKioskTouchOn(pInfo);
+         pEvdev-&gt;flags |= EVDEV_INITIALIZED;
+         device-&gt;public.on = TRUE;
+     }
+@@ -1404,8 +1405,10 @@ EvdevProc(DeviceIntPtr device, int what)
+         return EvdevOn(device);
+ 
+     case DEVICE_OFF:
+-        if (pEvdev-&gt;flags &amp; EVDEV_INITIALIZED)
++        if (pEvdev-&gt;flags &amp; EVDEV_INITIALIZED) {
+             EvdevMBEmuFinalize(pInfo);
++            EvdevKioskTouchFinalize(pInfo);
++        }
+         if (pInfo-&gt;fd != -1)
+         {
+             if (pEvdev-&gt;grabDevice &amp;&amp; ioctl(pInfo-&gt;fd, EVIOCGRAB, (void *)0))
+diff --git a/xf86-input-evdev-2.2.5/src/evdev.h b/xf86-input-evdev-2.2.5/src/evdev.h
+index 8d29078..eae82df 100644
+--- a/xf86-input-evdev-2.2.5/src/evdev.h
++++ b/xf86-input-evdev-2.2.5/src/evdev.h
+@@ -164,6 +164,9 @@ typedef struct {
+         unsigned int        button;
+         unsigned int        abs;
+         unsigned int        state;
++        unsigned int        delay;
++        int                 v[2],old_v[2];
++        Time                expires;
+     } kioskTouch;
+ 
+     unsigned char btnmap[32];           /* config-file specified button mapping */
+@@ -212,9 +215,12 @@ BOOL EvdevDragLockFilterEvent(InputInfoPtr pInfo, unsigned int button, int value
+ 
+ /* Kiosk Touch */
+ void EvdevKioskTouchPreInit(InputInfoPtr pInfo);
+-void EvdevKioskTouchMotionEvents(InputInfoPtr pInfo, unsigned int abs);
++void EvdevKioskTouchMotionEvents(InputInfoPtr pInfo, unsigned int abs, int *v);
+ BOOL EvdevKioskTouchFilterButton(InputInfoPtr pInfo, unsigned int button, int value);
+ void EvdevKioskTouchSynthButton(InputInfoPtr pInfo);
++void EvdevKioskTouchOn(InputInfoPtr pInfo);
++void EvdevKioskTouchFinalize(InputInfoPtr pInfo);
++
+ 
+ #ifdef HAVE_PROPERTIES
+ void EvdevMBEmuInitProperty(DeviceIntPtr);
+diff --git a/xf86-input-evdev-2.2.5/src/kioskTouch.c b/xf86-input-evdev-2.2.5/src/kioskTouch.c
+index 4f9389f..8d29e3e 100644
+--- a/xf86-input-evdev-2.2.5/src/kioskTouch.c
++++ b/xf86-input-evdev-2.2.5/src/kioskTouch.c
+@@ -36,15 +36,19 @@
+ #include &lt;evdev-properties.h&gt;
+ #include "evdev.h"
+ 
+-#define DEBUG(x) x;
++//#define DEBUG(x) x;
++#define DEBUG(x)
+ 
+ #ifdef HAVE_PROPERTIES
+ static Atom prop_ktouch        = 0; /* Kiosk touch emulation on/off property */
+ static Atom prop_ktouch_button = 0; /* Kiosk touch emulation button property */
++static Atom prop_ktouch_button_delay = 0; /* Kiosk touch emulation button delay property */
+ #endif
+ 
+ #define KTOUCH_STATE_ACTIVE 1U &lt;&lt; 0
+ #define KTOUCH_STATE_SYNTH  1U &lt;&lt; 1
++#define KTOUCH_STATE_DELAY 1U &lt;&lt; 2
++#define KTOUCH_STATE_DELAY_MOTION 1U &lt;&lt; 3
+ 
+ void
+ EvdevKioskTouchPreInit(InputInfoPtr pInfo)
+@@ -76,22 +80,53 @@ EvdevKioskTouchPreInit(InputInfoPtr pInfo)
+          val = 0;
+     }
+     pEvdev-&gt;kioskTouch.button = val;
++    val = xf86SetIntOption(pInfo-&gt;options, "KioskTouchButtonDelay", 0);
++    pEvdev-&gt;kioskTouch.delay = val;
+     pEvdev-&gt;kioskTouch.state = 0;
+     pEvdev-&gt;kioskTouch.abs = 0;
+-    xf86Msg(X_INFO, "%s: KioskTouchpad mode initialized to %s - button: %d\n",
++    xf86Msg(X_INFO, "%s: KioskTouchpad mode initialized to %s - button: %d delay: %d\n",
+             pInfo-&gt;name, (pEvdev-&gt;kioskTouch.mode == 0) ? "disabled" :
+             (pEvdev-&gt;kioskTouch.mode == 1 ? "click-on-touch" : "click-on-release"),
+-            pEvdev-&gt;kioskTouch.button);
++            pEvdev-&gt;kioskTouch.button, pEvdev-&gt;kioskTouch.delay);
+ }
+ 
+ void
+-EvdevKioskTouchMotionEvents(InputInfoPtr pInfo,  unsigned int abs)
++EvdevKioskTouchMotionEvents(InputInfoPtr pInfo,  unsigned int abs, int *v)
+ {
+     EvdevPtr pEvdev = (EvdevPtr)pInfo-&gt;private;
+ 
+     if (pEvdev-&gt;kioskTouch.mode == 1) {
++        DEBUG((ErrorF("EvdevKioskTouchMotionEvents: %x\n",abs)))
+         pEvdev-&gt;kioskTouch.abs |= abs;
++        if (pEvdev-&gt;kioskTouch.state &amp;  KTOUCH_STATE_DELAY) {
++            pEvdev-&gt;kioskTouch.v[0] = v[0];
++            v[0] = pEvdev-&gt;kioskTouch.old_v[0];
++            pEvdev-&gt;kioskTouch.v[1] = v[1];
++            v[1] = pEvdev-&gt;kioskTouch.old_v[1];
++            pEvdev-&gt;kioskTouch.state |= KTOUCH_STATE_DELAY_MOTION;
++        } else {
++            pEvdev-&gt;kioskTouch.old_v[0] = v[0];
++            pEvdev-&gt;kioskTouch.old_v[1] = v[1];
++        }
++    }
++}
++
++static BOOL
++EvdevKioskTouchStopButtonTimer(InputInfoPtr pInfo)
++{
++    EvdevPtr     pEvdev = (EvdevPtr)pInfo-&gt;private;
++
++    if ((pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY) == 0)
++        return FALSE;
++
++    pEvdev-&gt;kioskTouch.state &amp;= ~KTOUCH_STATE_DELAY;
++    xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++    if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY_MOTION) {
++        DEBUG((ErrorF("%s: Sending delayed motion\n",__FUNCTION__)))
++        pEvdev-&gt;kioskTouch.state &amp;= ~KTOUCH_STATE_DELAY_MOTION;
++        xf86PostMotionEventP(pInfo-&gt;dev, TRUE, 0, 2, pEvdev-&gt;kioskTouch.v);
+     }
++    return TRUE;
+ }
+ 
+ BOOL
+@@ -103,40 +138,66 @@ EvdevKioskTouchFilterButton(InputInfoPtr pInfo, unsigned int button, int value)
+     if (button &amp;&amp; button == pEvdev-&gt;kioskTouch.button) {
+         switch (pEvdev-&gt;kioskTouch.mode) {
+         case 0:
+-            DEBUG((ErrorF("EvdevKioskTouchFilterButton: mode 1 button %d value %d\n", \
+-                          button, value)))
++            DEBUG((ErrorF("EvdevKioskTouchFilterButton: mode 0 button %d value %d\n", \
++                          button, value)));
+             if (value == 1)
+                 pEvdev-&gt;kioskTouch.state = KTOUCH_STATE_ACTIVE;
+             else
+                 pEvdev-&gt;kioskTouch.state = 0;
+             return FALSE;
+         case 1:
++            DEBUG((ErrorF("EvdevKioskTouchFilterButton: mode 1 button %d value %d "\
++                          "abs:%x\n", button, value, pEvdev-&gt;kioskTouch.abs)));
+             ret = TRUE;
+             if (value == 1) {
+                 if ((pEvdev-&gt;kioskTouch.abs &amp; (ABS_X | ABS_Y)) == (ABS_X | ABS_Y)) {
+-                    DEBUG((ErrorF("Sending ButtonDown/ButtonUp\n")))
++                    DEBUG((ErrorF("Sending ButtonDown\n")))
+                     xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
+-                    xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 0, 0, 0);
++                    if (pEvdev-&gt;kioskTouch.delay &gt; 0) {
++                        pEvdev-&gt;kioskTouch.state |= KTOUCH_STATE_DELAY;
++                        pEvdev-&gt;kioskTouch.expires = GetTimeInMillis ()
++                            + pEvdev-&gt;kioskTouch.delay;
++                    } else {
++                        DEBUG((ErrorF("Sending ButtonUp\n")))
++                        xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 0, 0, 0);
++                    }
+                 } else {
+                     pEvdev-&gt;kioskTouch.state |= KTOUCH_STATE_SYNTH;
+                 }
+             } else if (value == 0) {
++                DEBUG((ErrorF("EvdevKioskTouchFilterButton: Filter Button UP\n")))
+                 if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_SYNTH) {
+                     xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++                    pEvdev-&gt;kioskTouch.state = 0;
++                        pEvdev-&gt;kioskTouch.abs = 0;
+                     ret = FALSE;
+-                }
+-                pEvdev-&gt;kioskTouch.state = 0;
+-                pEvdev-&gt;kioskTouch.abs = 0;
++                } else {
++                    if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY)
++                        EvdevKioskTouchStopButtonTimer(pInfo);
++                    pEvdev-&gt;kioskTouch.state = 0;
++                    pEvdev-&gt;kioskTouch.abs = 0;
++		}
+             }
+             return ret;
+         case 2:
+             DEBUG((ErrorF("EvdevKioskTouchFilterButton: mode 2 button %d value %d\n", \
+                           button, value)))
+-            if (value == 1)
++            if (value == 1) {
++                if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY)
++                    EvdevKioskTouchStopButtonTimer(pInfo);
+                 return TRUE;
+-            else if (value == 0)
+-                DEBUG((ErrorF("Sending ButtonDown\n")))
+-                xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++            } else if (value == 0) {
++                if (pEvdev-&gt;kioskTouch.delay &gt; 0) {
++                    pEvdev-&gt;kioskTouch.state |= KTOUCH_STATE_DELAY;
++                    pEvdev-&gt;kioskTouch.expires = GetTimeInMillis ()
++                        + pEvdev-&gt;kioskTouch.delay;
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++                    return TRUE;
++                } else {
++                    DEBUG((ErrorF("Sending ButtonDown\n")))
++                    xf86PostButtonEvent(pInfo-&gt;dev, 0, button, 1, 0, 0);
++                }
++            }
+             return FALSE;
+         default:
+             return FALSE;
+@@ -146,6 +207,78 @@ EvdevKioskTouchFilterButton(InputInfoPtr pInfo, unsigned int button, int value)
+     return FALSE;
+ }
+ 
++static void
++EvdevKioskTouchWakeupHandler(pointer data,
++                             int i,
++                             pointer LastSelectMask)
++{
++    InputInfoPtr pInfo = (InputInfoPtr)data;
++    EvdevPtr     pEvdev = (EvdevPtr)pInfo-&gt;private;
++    int ms;
++
++    if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY) {
++        ms = pEvdev-&gt;kioskTouch.expires - GetTimeInMillis();
++        if (ms &lt;= 0) {
++            int	sigstate;
++
++            sigstate = xf86BlockSIGIO ();
++            pEvdev-&gt;kioskTouch.state &amp;= ~KTOUCH_STATE_DELAY;
++            DEBUG((ErrorF("Delayed ButtonUP\n")))
++            xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++            if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY_MOTION) {
++                 pEvdev-&gt;kioskTouch.state &amp;= ~KTOUCH_STATE_DELAY_MOTION;
++                 DEBUG(ErrorF("%s: Sending delayed motion\n",__FUNCTION__))
++                 xf86PostMotionEventP(pInfo-&gt;dev, TRUE, 0, 2, pEvdev-&gt;kioskTouch.v);
++            }
++            xf86UnblockSIGIO (sigstate);
++        }
++    }
++}
++
++static void
++EvdevKioskTouchBlockHandler(pointer data,
++                            struct timeval **waitTime,
++                            pointer LastSelectMask)
++{
++    InputInfoPtr pInfo = (InputInfoPtr)data;
++    EvdevPtr     pEvdev = (EvdevPtr)pInfo-&gt;private;
++    int ms;
++
++    if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_DELAY) {
++        ms = pEvdev-&gt;kioskTouch.expires - GetTimeInMillis ();
++        if (ms &lt;= 0)
++            ms = 0;
++        AdjustWaitForDelay (waitTime, ms);
++    }
++}
++
++void
++EvdevKioskTouchOn(InputInfoPtr pInfo)
++{
++    EvdevPtr     pEvdev = (EvdevPtr)pInfo-&gt;private;
++
++    if (pEvdev-&gt;kioskTouch.mode == -1)
++        return;
++
++    RegisterBlockAndWakeupHandlers (EvdevKioskTouchBlockHandler,
++                                    EvdevKioskTouchWakeupHandler,
++                                    (pointer)pInfo);
++}
++
++void
++EvdevKioskTouchFinalize(InputInfoPtr pInfo)
++{
++    EvdevPtr     pEvdev = (EvdevPtr)pInfo-&gt;private;
++
++    if (pEvdev-&gt;kioskTouch.mode == -1)
++        return;
++
++    RemoveBlockAndWakeupHandlers (EvdevKioskTouchBlockHandler,
++                                  EvdevKioskTouchWakeupHandler,
++                                  (pointer)pInfo);
++
++}
++
+ void EvdevKioskTouchSynthButton(InputInfoPtr pInfo)
+ {
+     EvdevPtr     pEvdev = pInfo-&gt;private;
+@@ -153,9 +286,15 @@ void EvdevKioskTouchSynthButton(InputInfoPtr pInfo)
+     if (pEvdev-&gt;kioskTouch.mode == 1 &amp;&amp;
+         pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_SYNTH &amp;&amp;
+         (pEvdev-&gt;kioskTouch.abs &amp; (ABS_X | ABS_Y)) == (ABS_X | ABS_Y)) {
+-        DEBUG((ErrorF("Synthing ButtonDown/ButtonUp\n")))
++        DEBUG((ErrorF("Synthing ButtonDown\n")))
+         xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 1, 0, 0);
+-        xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++         if (pEvdev-&gt;kioskTouch.delay &gt; 0) {
++             pEvdev-&gt;kioskTouch.state |= KTOUCH_STATE_DELAY;
++             pEvdev-&gt;kioskTouch.expires = GetTimeInMillis () + pEvdev-&gt;kioskTouch.delay;
++         } else {
++             DEBUG((ErrorF("Synthing ButtonUP\n")))
++             xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++         }
+         pEvdev-&gt;kioskTouch.state &amp;= ~KTOUCH_STATE_SYNTH;
+     }
+ }
+@@ -177,9 +316,12 @@ EvdevKioskTouchSetProperty(DeviceIntPtr dev, Atom atom, XIPropertyValuePtr val,
+             int old_mode =  pEvdev-&gt;kioskTouch.mode;
+             pEvdev-&gt;kioskTouch.mode = *((CARD8*)val-&gt;data);
+             if (old_mode != pEvdev-&gt;kioskTouch.mode) {
+-                if (old_mode == 0 &amp;&amp;
+-                    pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_ACTIVE)
+-                    xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button, 0, 0, 0);
++                if (old_mode == 0) {
++                    if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_ACTIVE)
++                        xf86PostButtonEvent(pInfo-&gt;dev, 0, pEvdev-&gt;kioskTouch.button,
++                                            0, 0, 0);
++                } else
++                    EvdevKioskTouchStopButtonTimer(pInfo);
+                 pEvdev-&gt;kioskTouch.state = 0;
+                 pEvdev-&gt;kioskTouch.abs = 0;
+             }
+@@ -193,13 +335,28 @@ EvdevKioskTouchSetProperty(DeviceIntPtr dev, Atom atom, XIPropertyValuePtr val,
+             int old_button =  pEvdev-&gt;kioskTouch.button;
+             pEvdev-&gt;kioskTouch.button = *((CARD8*)val-&gt;data);
+             if (old_button != pEvdev-&gt;kioskTouch.button) {
+-                if (pEvdev-&gt;kioskTouch.mode == 0 &amp;&amp;
+-                    pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_ACTIVE)
+-                    xf86PostButtonEvent(pInfo-&gt;dev, 0, old_button, 0, 0, 0);
++                if (pEvdev-&gt;kioskTouch.mode == 0) {
++                    if (pEvdev-&gt;kioskTouch.state &amp; KTOUCH_STATE_ACTIVE)
++                        xf86PostButtonEvent(pInfo-&gt;dev, 0, old_button, 0, 0, 0);
++                } else
++                    EvdevKioskTouchStopButtonTimer(pInfo);
+                 pEvdev-&gt;kioskTouch.state = 0;
+                 pEvdev-&gt;kioskTouch.abs = 0;
+             }
+         }
++    } else if (atom == prop_ktouch_button_delay) {
++        if (val-&gt;format != 16 || val-&gt;size != 1 || val-&gt;type != XA_INTEGER)
++            return BadMatch;
++
++        if (!checkonly) {
++            pEvdev-&gt;kioskTouch.delay = *((CARD16*)val-&gt;data);
++            if (pEvdev-&gt;kioskTouch.mode &gt; 0) {
++                if (EvdevKioskTouchStopButtonTimer(pInfo)) {
++                    pEvdev-&gt;kioskTouch.state = 0;
++                    pEvdev-&gt;kioskTouch.abs = 0;
++                }
++            }
++        }
+     }
+ 
+     return Success;
+@@ -234,6 +391,16 @@ EvdevKioskTouchInitProperty(DeviceIntPtr dev)
+         return;
+     XISetDevicePropertyDeletable(dev, prop_ktouch_button, FALSE);
+ 
++    prop_ktouch_button_delay =
++        MakeAtom(EVDEV_PROP_KIOSK_BUTTON_DELAY, strlen(EVDEV_PROP_KIOSK_BUTTON_DELAY), TRUE);
++    rc = XIChangeDeviceProperty(dev, prop_ktouch_button_delay, XA_INTEGER, 16,
++                                PropModeReplace, 1,
++                                &amp;pEvdev-&gt;kioskTouch.delay,
++                                FALSE);
++    if (rc != Success)
++        return;
++    XISetDevicePropertyDeletable(dev, prop_ktouch_button_delay, FALSE);
++
+     XIRegisterPropertyHandler(dev, EvdevKioskTouchSetProperty, NULL, NULL);
+ }
+ #endif
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:SLE-11-SP2:Update" package="patchinfo"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-POS:11-SP3:i586" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-POS:11-SP3:x86_64" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-SERVER:11-SP3-TERADATA:x86_64" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-SERVER:11-SP4:i586" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-SERVER:11-SP4:ia64" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-SERVER:11-SP4:ppc64" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
  <action type="maintenance_release">
  <source project="SUSE:Maintenance:2396" package="patchinfo"/>
  <target project="SUSE:Updates:SLE-SERVER:11-SP4:x86_64" package="patchinfo.2396"/>
<sourcediff key="773c4542589101e0a0bd2d65a9f20cde">
  <old project="SUSE:Maintenance:2396" package="patchinfo" rev="0" srcmd5="d41d8cd98f00b204e9800998ecf8427e"/>
  <new project="SUSE:Maintenance:2396" package="patchinfo" rev="2" srcmd5="3418035dfe34b644be1a1ce04b1c0773"/>
  <files>
    <file state="added">
      <new name="_patchinfo" md5="1d938984e988247c892edbdbb91a3af8" size="621"/>
      <diff lines="16">@@ -0,0 +1,15 @@
+&lt;patchinfo incident="2396"&gt;
+  &lt;name&gt;xorg-x11-driver-input&lt;/name&gt;
+  &lt;issue id="967836" tracker="bnc"&gt;Add an absolute Placement Mode for Touchscreens to the evdev-dr&lt;/issue&gt;
+  &lt;issue id="319647" tracker="fate"/&gt;
+  &lt;category&gt;recommended&lt;/category&gt;
+  &lt;rating&gt;low&lt;/rating&gt;
+  &lt;packager&gt;eeich&lt;/packager&gt;
+  &lt;description&gt;
+This update for xorg-x11-driver-input provides the following enhancements:
+
+- Add Kiosk mode: Implement a filter for the evdev driver which provides
+  click-on-touch and click-on-release. (fate#319647, bsc#967836)
+&lt;/description&gt;
+  &lt;summary&gt;Recommended update for xorg-x11-driver-input&lt;/summary&gt;
+&lt;/patchinfo&gt;
</diff>
    </file>
  </files>
</sourcediff></action>
</request>